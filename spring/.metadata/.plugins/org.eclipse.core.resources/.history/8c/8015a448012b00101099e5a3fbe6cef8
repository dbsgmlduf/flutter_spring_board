package com.example.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.model.BoardVO;
import com.example.service.BoardService;

@RestController
@RequestMapping("/api/board")
public class BoardController {
	
	@Autowired
	private BoardService boardService;
	
	@PostMapping("/enroll")
	public ResponseEntity<Map<String, Object>> enroll(@RequestBody BoardVO board) {
		Map<String, Object> response = new HashMap<>();
		System.out.println("등록 요청 받은 데이터: " + board);
		
		try {
			boardService.enroll(board);
			
			// 성공 응답 구성
			response.put("status", "success");
			response.put("message", "게시글이 성공적으로 등록되었습니다.");
			response.put("data", board);
			
			return new ResponseEntity<>(response, HttpStatus.CREATED);
		} catch (Exception e) {
			// 실패 응답 구성
			response.put("status", "error");
			response.put("message", "게시글 등록 중 오류가 발생했습니다: " + e.getMessage());
			
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/list")
	public ResponseEntity<Map<String, Object>> getList() {
		Map<String, Object> response = new HashMap<>();
		
		try {
			List<BoardVO> list = boardService.getList();
			System.out.println("list: "+list);
			
//			// 날짜 포맷팅을 위해 각 BoardVO 객체의 날짜 필드를 문자열로 변환
//			list.forEach(board -> {
//				board.setRegdate(board.getFormattedRegdate());
//				board.setUpdateDate(board.getFormattedUpdateDate());
//			});
			
			// 성공 응답 구성
			response.put("status", "success");
			response.put("message", "게시글 목록을 성공적으로 조회했습니다.");
			response.put("data", list);
			
			return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (Exception e) {
			// 실패 응답 구성
			response.put("status", "error");
			response.put("message", "게시글 목록 조회 중 오류가 발생했습니다: " + e.getMessage());
			
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/getPage/{bno}")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> getPage(@PathVariable Integer bno){
		System.out.println("List:: "+ boardService.getPage(bno));
		Map<String, Object> response = new HashMap<>();
		try {
			response.put("status", "success");
			response.put("message", "상세 조회를 성공적으로 조회했습니다.");
			response.put("data", boardService.getPage(bno));
			System.out.println("response");
			System.out.println(response);
			return new ResponseEntity<>(response, HttpStatus.OK);
		}catch(Exception e) {
			response.put("status", "error");
			response.put("message", "상세 조회 중 오류가 발생했습니다: " + e.getMessage());
			
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/delete/{bno}")
	public ResponseEntity<Map<String, Object>>delete(@PathVariable Integer bno){
		System.out.println("List:: "+ boardService.getPage(bno));
		Map<String, Object> response = new HashMap<>();
		try {
			boardService.delete(bno);
			response.put("status", "success");
			response.put("message", "게시글 삭제를 성공적으로 했습니다.");
			return new ResponseEntity<>(response,HttpStatus.OK);
		}catch(Exception e){
			response.put("status", "error");
			response.put("message", "게시글 삭제 중 오류가 발생했습니다: " + e.getMessage());
			
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PostMapping("/modify")
	public ResponseEntity<Map<String, Object>>modify(@RequestBody BoardVO board){
		Map<String, Object> response = new HashMap<>();
		System.out.println("수정 요청 받은 데이터: " + board);
		
		try {
			boardService.modify(board);
			// 성공 응답 구성
			response.put("status", "success");
			response.put("message", "게시글이 성공적으로 수정되었습니다.");
			response.put("data", board);
			
			return new ResponseEntity<>(response, HttpStatus.CREATED);
		} catch (Exception e) {
			// 실패 응답 구성
			response.put("status", "error");
			response.put("message", "게시글 수정 중 오류가 발생했습니다: " + e.getMessage());
			
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
} 